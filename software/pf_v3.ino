// Adafruit NeoPixel - Version: Latest 
#include <Adafruit_NeoPixel.h>


/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/3c5a51e9-e721-41fc-b117-aeb981943073 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLight led_Mode1;
  CloudLight led_Mode2;
  CloudLight led_Mode3;
  CloudLight led_Mode4;
  bool relay;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// Definimos los pines de conexión del LED y el número de LEDs en la tira
#define LED_PIN 14
#define NUM_LEDS 60
#define BUZZER_PIN 12
#define RELAY_PIN 13

#include "thingProperties.h"

// Creamos una instancia de la clase Adafruit_NeoPixel
Adafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  onLedMode1Change();
  onLedMode2Change();
  onLedMode3Change();
  onLedMode4Change();
}


/*
  Since LedMode1 is READ_WRITE variable, onLedMode1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedMode1Change()  {
  // Add your code here to act upon LedMode1 change
  if (led_Mode1) {
    encenderLEDs(255, 0, 0); // Color rojo
  }
  else {
    // Apagamos todos los LEDs
    apagarLEDs();
  }
}

/*
  Since LedMode2 is READ_WRITE variable, onLedMode2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedMode2Change()  {
  // Add your code here to act upon LedMode2 change
  if (led_Mode2) {
    encenderLEDs(0, 255, 0); // Color verde
  }
  else {
    // Apagamos todos los LEDs
    apagarLEDs();
  }
}

/*
  Since LedMode3 is READ_WRITE variable, onLedMode3Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedMode3Change()  {
  // Add your code here to act upon LedMode3 change
  if (led_Mode3) {
    encenderLEDs(0, 0, 255); // Color azul
  }
  else {
    // Apagamos todos los LEDs
    apagarLEDs();
  }
}

/*
  Since LedMode4 is READ_WRITE variable, onLedMode4Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedMode4Change()  {
  // Add your code here to act upon LedMode4 change
  if (led_Mode4) {
    for (int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(i, getColor());
    strip.show();
    delay(100); // Esperamos medio segundo antes de encender el siguiente Neopixel
  }
  }
  else {
    // Apagamos todos los LEDs
    apagarLEDs();
  }
}


/*
  Since Relay is READ_WRITE variable, onRelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRelayChange()  {
  // Add your code here to act upon Relay change
   if (relay) {
    digitalWrite(RELAY_PIN, HIGH);
    onBuzzerChange();
  }
  else {
    digitalWrite(RELAY_PIN, LOW);
  }
}


// Función para encender todos los LEDs de la tira con un color específico
void encenderLEDs(uint8_t r, uint8_t g, uint8_t b) {
  for (int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(i, strip.Color(r, g, b));
    strip.show();
    delay(50); // Esperamos medio segundo antes de encender el siguiente Neopixel
  }
}


// Función para apagar todos los LEDs de la tira
void apagarLEDs() {
  for (int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(i, strip.Color(0, 0, 0));
  }
  strip.show(); // Actualizamos los LEDs
}

// Función para obtener un color aleatorio
uint32_t getColor() {
  int r = random(0, 256);
  int g = random(0, 256); 
  int b = random(0, 256);
  return strip.Color(r, g, b);
}


void onBuzzerChange()  {
  // Add your code here to act upon Buzzer change
  digitalWrite(BUZZER_PIN, HIGH);
  delay(500);
  digitalWrite(BUZZER_PIN, LOW);
}